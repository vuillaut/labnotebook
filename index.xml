<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Lab Notebook</title>
<link>https://vuillaut.github.io/labnotebook/index.html</link>
<atom:link href="https://vuillaut.github.io/labnotebook/index.xml" rel="self" type="application/rss+xml"/>
<description>Personnal blog-like laboratory notebook.</description>
<generator>quarto-1.2.335</generator>
<lastBuildDate>Wed, 01 Mar 2023 00:00:00 GMT</lastBuildDate>
<item>
  <title>Running JupyterLab in a singularity container on MUST</title>
  <dc:creator>Thomas Vuillaume</dc:creator>
  <link>https://vuillaut.github.io/labnotebook/posts/2022-03-01_singularity_jupyterlab_must.html</link>
  <description><![CDATA[ 




<section id="singularity-recipe" class="level1">
<h1>singularity recipe</h1>
<pre><code>Bootstrap: docker
From: continuumio/anaconda3:latest

%environment
    export PATH="/opt/conda/bin:$PATH"

%post
    # Installation de pip
    conda install -y -c anaconda pip

    # Installation de la librairie CTAplot avec pip
    pip install ctaplot

    # Création du répertoire .jupyter
    mkdir /root/.jupyter

    # Création du fichier de configuration de Jupyter Lab
    touch /root/.jupyter/jupyter_notebook_config.py

    # Configuration de Jupyter Lab
    echo "c.NotebookApp.ip = '0.0.0.0'" &gt;&gt; /root/.jupyter/jupyter_notebook_config.py
    echo "c.NotebookApp.open_browser = False" &gt;&gt; /root/.jupyter/jupyter_notebook_config.py
    echo "c.NotebookApp.port = 8888" &gt;&gt; /root/.jupyter/jupyter_notebook_config.py

    # Exposition du port de Jupyter Lab
    export PORT=8888
    echo "export PORT=8888" &gt;&gt; /root/.bashrc

    # Modification des permissions du répertoire .jupyter
    chmod -R 777 /root/.jupyter

%runscript
    jupyter lab --allow-root --port $PORT --no-browser</code></pre>
</section>
<section id="building-the-image" class="level1">
<h1>2. Building the image</h1>
<pre><code>singularity build jup.sif jup.def</code></pre>
</section>
<section id="executing-the-container" class="level1">
<h1>3. Executing the container</h1>
<pre><code>singularity exec --bind $PWD:/run/user jup.sif jupyter-lab --no-browser --ip=127.0.0.1 --NotebookApp.token=''</code></pre>
</section>
<section id="sy-connecter-depuis-son-laptop" class="level1">
<h1>4. S’y connecter depuis son laptop</h1>
<p>Dans un autre terminal</p>
<pre><code>ssh -L 8888:127.0.0.1:8888 username@lappusmb.in2p3.fr</code></pre>


</section>

 ]]></description>
  <category>notes</category>
  <guid>https://vuillaut.github.io/labnotebook/posts/2022-03-01_singularity_jupyterlab_must.html</guid>
  <pubDate>Wed, 01 Mar 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>conda config</title>
  <dc:creator>Thomas Vuillaume</dc:creator>
  <link>https://vuillaut.github.io/labnotebook/posts/conda_config.html</link>
  <description><![CDATA[ 




<section id="personnal-conda-config." class="level1">
<h1>Personnal conda config.</h1>
<p>May evolve in time.</p>
<section id="libmamba-solver-for-conda" class="level2">
<h2 class="anchored" data-anchor-id="libmamba-solver-for-conda">libmamba solver for conda</h2>
<p>See https://conda.github.io/conda-libmamba-solver/getting-started/</p>
<p>Install Anaconda or Miniconda: https://docs.conda.io/en/latest/miniconda.html#linux-installers</p>
<pre><code>conda install -n base conda-libmamba-solver
conda config --set solver libmamba</code></pre>
<p>Don’t install anything else in base.</p>
</section>
<section id="my-envs" class="level2">
<h2 class="anchored" data-anchor-id="my-envs">My envs</h2>
<p>https://github.com/vuillaut/myenvs</p>
<pre><code>conda config --add channels vuillaut
conda create -n jlab jlab</code></pre>
</section>
<section id="jupyter-lab" class="level2">
<h2 class="anchored" data-anchor-id="jupyter-lab">Jupyter lab</h2>
<p>To add a conda env to the jupyter/ipython kernels:</p>
<pre><code>function addkernel(){
  conda activate $1
  ipython kernel install --name "$1" --user
}

addkernel myenv</code></pre>
<p>This way you can run the jupyterlab interface without prefered plugins but run different computing kernels.</p>


</section>
</section>

 ]]></description>
  <category>notes</category>
  <guid>https://vuillaut.github.io/labnotebook/posts/conda_config.html</guid>
  <pubDate>Wed, 11 Jan 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>ctapipe generate R1/DL0 HDF5</title>
  <dc:creator>Thomas Vuillaume</dc:creator>
  <link>https://vuillaut.github.io/labnotebook/posts/2022-09-01_ctapipe_hdf5_r0.html</link>
  <description><![CDATA[ 




<section id="ctapipe-generate-hdf5-with-r1dl0-waveforms" class="level1">
<h1>ctapipe generate HDF5 with R1/DL0 waveforms</h1>
<pre><code>ctapipe-quickstart</code></pre>
<p>will generate a base config</p>
<p>Edit the config with:</p>
<pre><code>  write_showers: true # store DL2 stereo geometry
  write_raw_waveforms: true # write R0 waveforms
  write_waveforms: true # write R1 waveforms
  transform_waveform: true
  waveform_dtype: "uint16"
  waveform_offset: 400
  waveform_scale: 80</code></pre>
<p>The waveforms are scaled to fit in <code>uint16</code> and scaled back at reading.</p>
<p>Then run:</p>
<pre><code>ctapipe-process --config base_config.yaml --input ../Simtel/prod5/gamma_20deg_0deg_run5___cta-prod5-paranal_desert-2147m-Paranal-dark.simtel.zst --output gamma_20deg_0deg_run5___cta-prod5-paranal_desert-2147m-Paranal-dark.h5</code></pre>


</section>

 ]]></description>
  <category>notes</category>
  <guid>https://vuillaut.github.io/labnotebook/posts/2022-09-01_ctapipe_hdf5_r0.html</guid>
  <pubDate>Thu, 01 Sep 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>analyse LST-1 data</title>
  <dc:creator>Thomas Vuillaume</dc:creator>
  <link>https://vuillaut.github.io/labnotebook/posts/2022-07-27_analyse_LST-1_data.html</link>
  <description><![CDATA[ 




<section id="how-to-analyse-lst-1-data" class="level1">
<h1>How to analyse LST-1 data</h1>
<section id="get-the-data" class="level2">
<h2 class="anchored" data-anchor-id="get-the-data">Get the data</h2>
<p>From the LST wiki page, or the elogs, find the runs you want to analyse. Find the corresponding DL1 files on the cluster, probably under <code>/fefs/aswg/data/real/DL1/.../</code>. These files have been automatically produced by LSTOSA, there might be several versions, corresponding to different lstchain versions. In doubt, use the last one.</p>
</section>
<section id="select-the-data" class="level2">
<h2 class="anchored" data-anchor-id="select-the-data">Select the data</h2>
<p>You might want to sub-select the runs to use, following https://indico.cta-observatory.org/event/3984/</p>
</section>
<section id="corresponding-mc-production" class="level2">
<h2 class="anchored" data-anchor-id="corresponding-mc-production">Corresponding MC production</h2>
<p>The AllSky MC production follows sources declinations, as explained in: - <a href="https://indico.cta-observatory.org/event/4061/contributions/33409/attachments/21211/29956/Crab_analysis_20220404.pdf">https://indico.cta-observatory.org/event/4061/contributions/33409/attachments/21211/29956/Crab_analysis_20220404.pdf</a> - ??</p>
<p>Random forests models are trained per declination and then used on the MC test data to produce IRFs on all test pointing directions.</p>
</section>
<section id="produce-your-dl2-files" class="level2">
<h2 class="anchored" data-anchor-id="produce-your-dl2-files">Produce your DL2 files</h2>
<p>From the DL1 files, you will need to produce the DL2 files using the right RF model.</p>
<section id="standard-rf-models-and-irfs" class="level3">
<h3 class="anchored" data-anchor-id="standard-rf-models-and-irfs">Standard RF models and IRFs</h3>
<p>If you are analysing an extragalactic source, the standard models trained for the closest declination of your source is likely enough. You can find these models under</p>
<pre><code>/fefs/aswg/data/models/AllSky/.../</code></pre>
<p>Apply the model to the DL1 files using lstchain <code>lstchain_dl1_to_dl2</code></p>
<p>In this case, you can also use the corresponding standard IRFSs, under <code>/fefs/aswg/data/IRF/AllSky/.../</code>.</p>
</section>
<section id="custom-rf-models-and-irfs" class="level3">
<h3 class="anchored" data-anchor-id="custom-rf-models-and-irfs">Custom RF models and IRFs</h3>
<p>If your source needs MC tuning (e.g.&nbsp;for strong NSB / galactic sources): 1. please check that a fitting custom training does not exist from <a href="https://cta-observatory.github.io/lstmcpipe/productions.html">https://cta-observatory.github.io/lstmcpipe/productions.html</a> 2. if not, you may request a custom training using lstmcpipe pull-requests: <a href="https://cta-observatory.github.io/lstmcpipe/index.html#requesting-a-mc-analysis">https://cta-observatory.github.io/lstmcpipe/index.html#requesting-a-mc-analysis</a></p>
<p>The lstchain config must be produced using <code>lstchain_tune_nsb</code> on the DL1 files you want to analyse.</p>
<p>The lstmcpipe config must be produced following: <a href="https://cta-observatory.github.io/lstmcpipe/pipeline.html#allsky-production-pipeline">https://cta-observatory.github.io/lstmcpipe/pipeline.html#allsky-production-pipeline</a></p>
</section>
</section>
<section id="produce-your-dl3-files" class="level2">
<h2 class="anchored" data-anchor-id="produce-your-dl3-files">Produce your DL3 files</h2>
<p><code>lstchain_create_dl3_file</code></p>
</section>
<section id="high-level-analysis" class="level2">
<h2 class="anchored" data-anchor-id="high-level-analysis">High-level analysis</h2>
<p>Use gammapy to analyse the DL3 files using the corresponding IRFs.</p>


</section>
</section>

 ]]></description>
  <category>notes</category>
  <guid>https://vuillaut.github.io/labnotebook/posts/2022-07-27_analyse_LST-1_data.html</guid>
  <pubDate>Wed, 27 Jul 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>conda must config</title>
  <dc:creator>Thomas Vuillaume</dc:creator>
  <link>https://vuillaut.github.io/labnotebook/posts/2022-07-22_conda_must_config.html</link>
  <description><![CDATA[ 




<section id="use-shared-conda" class="level1">
<h1>Use shared conda</h1>
<pre><code>__conda_setup="$('/usr/bin/conda' 'shell.bash' 'hook' 2&gt; /dev/null)"
eval "$__conda_setup"</code></pre>
</section>
<section id="setup-config" class="level1">
<h1>Setup config</h1>
<pre><code>conda config</code></pre>
<p>Will generate a <code>.condarc</code> file in the home directory.</p>
<p>Edit this file to add the following:</p>
<pre><code>envs_dirs:
  - /mustfs/CONTAINERS/conda/glearn/envs/

pkgs_dirs:
  - /mustfs/CONTAINERS/conda/glearn/pkgs/

channels:
  - conda-forge
  - defaults</code></pre>
<p>Changing <code>pkgs_dirs</code> and <code>envs_dirs</code> is necessary to avoid hitting disk quotas in your own home directory. Create new directories to set these paths. This will avoid mutli-users installation and writing rights issues.</p>


</section>

 ]]></description>
  <category>notes</category>
  <guid>https://vuillaut.github.io/labnotebook/posts/2022-07-22_conda_must_config.html</guid>
  <pubDate>Fri, 22 Jul 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>LST-1 data analysis worflow</title>
  <dc:creator>Thomas Vuillaume</dc:creator>
  <link>https://vuillaut.github.io/labnotebook/posts/20220701_LST1_data_flowchart.html</link>
  <description><![CDATA[ 




<div class="cell">
<div class="cell-output-display">
<div>
<p>
</p><pre class="mermaid mermaid-js" data-tooltip-selector="#mermaid-tooltip-1">flowchart LR

  R0-Protons[R0 Protons \n - node a\n - node b\n - node c]
  R0-GammaDiffuse[R0 GammaDiffuse \n - node a\n - node b\n - node c]
  R0-GammaPS[R0 Gamma PS \n - node a\n - node b\n - node c]

  DL1-Protons[DL1 Protons \n - node a\n - node b\n - node c]
  DL1-GammaDiffuse[DL1 GammaDiffuse \n - node a\n - node b\n - node c]
  DL1-GammaPS[DL1 Gamma PS \n - node a\n - node b\n - node c]


  R0-GammaDiffuse --&gt; |r0_to_dl1| DL1-GammaDiffuse
  R0-Protons --&gt; |r0_to_dl1| DL1-Protons
  R0-GammaPS --&gt; |r0_to_dl1| DL1-GammaPS


  DL1-GammaDiffuse --&gt; |merge_dl1| DL1-GammaDiffuse-merged[DL1 Gamma Diffuse\nall nodes]
  DL1-Protons --&gt; |merge_dl1| DL1-Protons-merged[DL1 Protons\nall nodes]

  DL1-GammaDiffuse-merged &amp; DL1-Protons-merged --&gt; train_pipe((train_pipe))

  train_pipe --&gt; models

  models --&gt; DL2-GammaPS

  DL1-GammaPS --&gt; |merge_dl1| DL1-GammaPS-merged[DL1 Gamma PS \n - node a merged\n - node b merged\n - node c merged]
  DL1-GammaPS-merged ----&gt; DL2-GammaPS
  DL2-GammaPS[DL2 Gamma PS \n - node a merged\n - node b merged\n - node c merged]

  DL2-GammaPS --&gt; |dl2_to_irf| IRF-GammaPS
  IRF-GammaPS[IRF Gamma PS \n - node a merged\n - node b merged\n - node c merged]

  RO-real --&gt; |lstosa| DL1-real -.....-&gt; |lstchain_dl1_to_dl2| DL2-real
  models .-&gt; |lstchain_dl1_to_dl2| DL2-real
  DL2-GammaPS .-&gt; |lstchain_create_irf_files| IRF-custom
  DL2-real &amp; IRF-custom .-&gt; DL3-real

</pre>
<div id="mermaid-tooltip-1" class="mermaidTooltip">

</div>
<p></p>
</div>
</div>
</div>
<p>Plain lines: done with lstmcpipe</p>
<p>Dashed lines: to be done by analyzers</p>



 ]]></description>
  <category>notes</category>
  <category>cta</category>
  <guid>https://vuillaut.github.io/labnotebook/posts/20220701_LST1_data_flowchart.html</guid>
  <pubDate>Fri, 01 Jul 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Correcting coma aberration bias</title>
  <dc:creator>Thomas Vuillaume</dc:creator>
  <link>https://vuillaut.github.io/labnotebook/posts/20220609_coma_aberration_bias/bias_corr_altaz.html</link>
  <description><![CDATA[ 




<div class="cell" data-execution_count="1">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;">from</span> lstchain.io.io <span class="im" style="color: #00769E;">import</span> dl2_params_lstcam_key</span>
<span id="cb1-2"><span class="im" style="color: #00769E;">from</span> ctapipe.io <span class="im" style="color: #00769E;">import</span> read_table</span>
<span id="cb1-3"><span class="im" style="color: #00769E;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;">as</span> plt</span>
<span id="cb1-4"><span class="im" style="color: #00769E;">import</span> numpy <span class="im" style="color: #00769E;">as</span> np</span>
<span id="cb1-5"><span class="im" style="color: #00769E;">import</span> ctaplot</span>
<span id="cb1-6"><span class="im" style="color: #00769E;">import</span> astropy.units <span class="im" style="color: #00769E;">as</span> u</span>
<span id="cb1-7"><span class="im" style="color: #00769E;">from</span> astropy.visualization <span class="im" style="color: #00769E;">import</span> quantity_support</span>
<span id="cb1-8"><span class="im" style="color: #00769E;">from</span> copy <span class="im" style="color: #00769E;">import</span> deepcopy</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="im" style="color: #00769E;">import</span> warnings</span>
<span id="cb1-11">warnings.filterwarnings(<span class="st" style="color: #20794D;">"ignore"</span>)</span>
<span id="cb1-12"></span>
<span id="cb1-13">ctaplot.set_style(<span class="st" style="color: #20794D;">'notebook'</span>)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="2">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;"># Reading DL2 parameters</span></span>
<span id="cb2-2"></span>
<span id="cb2-3">filename <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'dl2_gamma-diffuse_20deg_180deg_20220215_v0.9.1_prod5_trans_80_local_tailcut_8_4_testing.h5'</span></span>
<span id="cb2-4">params <span class="op" style="color: #5E5E5E;">=</span> read_table(filename, path<span class="op" style="color: #5E5E5E;">=</span>dl2_params_lstcam_key)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="3">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">params[:<span class="dv" style="color: #AD0000;">4</span>]</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="3">

<div><i>Table length=4</i>
<table id="table140318220074384" class="table-striped table-bordered table-condensed">
<thead><tr><th>obs_id</th><th>event_id</th><th>intensity</th><th>log_intensity</th><th>x</th><th>y</th><th>r</th><th>phi</th><th>length</th><th>length_uncertainty</th><th>width</th><th>width_uncertainty</th><th>psi</th><th>skewness</th><th>kurtosis</th><th>time_gradient</th><th>intercept</th><th>leakage_intensity_width_1</th><th>leakage_intensity_width_2</th><th>leakage_pixels_width_1</th><th>leakage_pixels_width_2</th><th>n_pixels</th><th>concentration_cog</th><th>concentration_core</th><th>concentration_pixel</th><th>n_islands</th><th>alt_tel</th><th>az_tel</th><th>calibration_id</th><th>mc_energy</th><th>log_mc_energy</th><th>mc_alt</th><th>mc_az</th><th>mc_core_x</th><th>mc_core_y</th><th>mc_h_first_int</th><th>mc_type</th><th>mc_az_tel</th><th>mc_alt_tel</th><th>mc_x_max</th><th>mc_core_distance</th><th>wl</th><th>tel_id</th><th>tel_pos_x</th><th>tel_pos_y</th><th>tel_pos_z</th><th>trigger_type</th><th>trigger_time</th><th>event_type</th><th>disp_dx</th><th>disp_dy</th><th>disp_norm</th><th>disp_angle</th><th>disp_sign</th><th>src_x</th><th>src_y</th><th>log_reco_energy</th><th>reco_energy</th><th>reco_disp_norm</th><th>reco_disp_sign</th><th>reco_disp_dx</th><th>reco_disp_dy</th><th>reco_src_x</th><th>reco_src_y</th><th>signed_time_gradient</th><th>signed_skewness</th><th>reco_alt</th><th>reco_az</th><th>reco_type</th><th>gammaness</th></tr></thead>
<thead><tr><th>int32</th><th>int64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float32</th><th>float32</th><th>float64</th><th>float64</th><th>int64</th><th>float64</th><th>float64</th><th>float64</th><th>int64</th><th>float32</th><th>float32</th><th>int64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>int64</th><th>float32</th><th>float32</th><th>float64</th><th>float64</th><th>float64</th><th>int64</th><th>float32</th><th>float32</th><th>float32</th><th>int64</th><th>float64</th><th>int64</th><th>float32</th><th>float32</th><th>float32</th><th>float32</th><th>float32</th><th>float32</th><th>float32</th><th>float64</th><th>float64</th><th>float64</th><th>float32</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>float64</th><th>int64</th><th>float64</th></tr></thead>
<tbody><tr><td>1001</td><td>709</td><td>204.69166946411133</td><td>2.311100168117379</td><td>-0.9429552882748465</td><td>-0.026957666936253902</td><td>0.9433405490554008</td><td>-3.1130119491933934</td><td>0.23443860343360137</td><td>0.007842269988100201</td><td>0.04986447721090286</td><td>0.002820204535803679</td><td>-0.4176405820038234</td><td>-0.07617936614500895</td><td>1.9161796601516858</td><td>3.1583494315627387</td><td>12.587750635123518</td><td>0.10073532</td><td>0.2327244</td><td>0.001078167115902965</td><td>0.0026954177897574125</td><td>17</td><td>0.23259960879032218</td><td>0.3863265920398024</td><td>0.12316187984675661</td><td>1</td><td>1.2217305</td><td>3.1415927</td><td>-1</td><td>0.10125340521335602</td><td>-0.9945903622811716</td><td>1.1737884283065796</td><td>3.155841827392578</td><td>117.61976623535156</td><td>-120.98987579345703</td><td>26547.115234375</td><td>0</td><td>3.1415927</td><td>1.2217305</td><td>290.8888854980469</td><td>200.7509994593757</td><td>0.21269738208889166</td><td>1</td><td>-70.93</td><td>-52.07</td><td>43.0</td><td>32</td><td>1606861253.334231</td><td>32</td><td>-0.3983867</td><td>0.18139814</td><td>0.43774107</td><td>-0.427279</td><td>-1.0</td><td>-1.341342</td><td>0.15444046</td><td>-1.1414124982346003</td><td>0.07220836338806491</td><td>0.46018360223014054</td><td>-1.0</td><td>-0.4206301199562092</td><td>0.18665275231598732</td><td>-1.3635854082310557</td><td>0.15969508537973343</td><td>3.1583494315627387</td><td>-0.07617936614500895</td><td>1.1729915791160523</td><td>3.1562981500860525</td><td>101</td><td>0.4760000000000001</td></tr>
<tr><td>1001</td><td>14702</td><td>217.4642243385315</td><td>2.337387820139739</td><td>0.46072834092859943</td><td>0.36336524399868014</td><td>0.5867750034562141</td><td>0.6677976333175436</td><td>0.11662511682514344</td><td>0.004811480715105807</td><td>0.053738868040224395</td><td>0.002788135479311323</td><td>-1.0265033637403687</td><td>-0.038384931699866426</td><td>2.4805392633587666</td><td>2.7483252979769865</td><td>12.349330838624663</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>12</td><td>0.5390022183986967</td><td>0.3993600665294417</td><td>0.2218359666299674</td><td>1</td><td>1.2217305</td><td>3.1415927</td><td>-1</td><td>0.0735081136226654</td><td>-1.1336647220440166</td><td>1.2285054922103882</td><td>3.2149901390075684</td><td>42.88823699951172</td><td>-197.08230590820312</td><td>18002.349609375</td><td>0</td><td>3.1415927</td><td>1.2217305</td><td>219.3333282470703</td><td>184.34521989047866</td><td>0.46078297285476955</td><td>1</td><td>-70.93</td><td>-52.07</td><td>43.0</td><td>32</td><td>1606861265.158689</td><td>32</td><td>-0.24724865</td><td>0.32590026</td><td>0.40907562</td><td>-0.92177355</td><td>-1.0</td><td>0.2134797</td><td>0.6892655</td><td>-1.2231808210053707</td><td>0.059816249481173096</td><td>0.30984948357431924</td><td>-1.0</td><td>-0.1604442004451036</td><td>0.2650742556620762</td><td>0.30028414048349583</td><td>0.6284394996607563</td><td>2.7483252979769865</td><td>-0.038384931699866426</td><td>1.2317426248864978</td><td>3.20911681028575</td><td>101</td><td>0.3741666666666666</td></tr>
<tr><td>1001</td><td>15008</td><td>165.50613975524902</td><td>2.218814109364702</td><td>-0.9169175343015934</td><td>-0.4088572589615097</td><td>1.0039432368989956</td><td>-2.722150123264711</td><td>0.07766195427204564</td><td>0.003358692847208187</td><td>0.06926784537908715</td><td>0.0031922758184949524</td><td>-1.47705421630234</td><td>0.5812040134885849</td><td>2.2382191567652474</td><td>-3.0261770559629255</td><td>12.396861472555743</td><td>0.12780459</td><td>0.5962281</td><td>0.0016172506738544475</td><td>0.0037735849056603774</td><td>10</td><td>0.5284481789086114</td><td>0.27380341851728035</td><td>0.25464478344000624</td><td>1</td><td>1.2217305</td><td>3.1415927</td><td>-1</td><td>0.06741833686828613</td><td>-1.171221965221083</td><td>1.1863691806793213</td><td>3.123426675796509</td><td>0.5827245712280273</td><td>-149.97592163085938</td><td>21047.283203125</td><td>0</td><td>3.1415927</td><td>1.2217305</td><td>188.18182373046875</td><td>121.24206930514356</td><td>0.8919147866978162</td><td>1</td><td>-70.93</td><td>-52.07</td><td>43.0</td><td>32</td><td>1606861266.308928</td><td>32</td><td>-0.07156822</td><td>0.21798934</td><td>0.22943705</td><td>-1.253573</td><td>-1.0</td><td>-0.98848575</td><td>-0.19086792</td><td>-1.169116370207806</td><td>0.06774599563308585</td><td>0.21682144939570283</td><td>-1.0</td><td>-0.02029554496514809</td><td>0.21586947855734717</td><td>-0.9372130792667415</td><td>-0.19298778040416253</td><td>-3.0261770559629255</td><td>0.5812040134885849</td><td>1.1881988117550633</td><td>3.123140245988693</td><td>101</td><td>0.0455</td></tr>
<tr><td>1001</td><td>24006</td><td>5026.379844665527</td><td>3.7012553052292714</td><td>-0.46367241536546555</td><td>-0.08235761000760355</td><td>0.4709298086732346</td><td>-2.965805734618248</td><td>0.32224864071559073</td><td>0.0035545823049572705</td><td>0.07874576241532436</td><td>0.0012247855781627778</td><td>-0.04766358667702001</td><td>-0.8975937266162266</td><td>3.446251471675243</td><td>-3.3362477070804664</td><td>15.747667526377434</td><td>0.0</td><td>0.0</td><td>0.0</td><td>0.0</td><td>64</td><td>0.18626662829024138</td><td>0.44953505412944617</td><td>0.09333687274463297</td><td>2</td><td>1.2217305</td><td>3.1415927</td><td>-1</td><td>1.0042767524719238</td><td>0.001853409531100706</td><td>1.2219613790512085</td><td>3.1297266483306885</td><td>-205.5702667236328</td><td>-40.51348114013672</td><td>24701.7890625</td><td>0</td><td>3.1415927</td><td>1.2217305</td><td>335.6097412109375</td><td>135.1353190780927</td><td>0.24436336563114805</td><td>1</td><td>-70.93</td><td>-52.07</td><td>43.0</td><td>32</td><td>1606861279.03483</td><td>32</td><td>0.4707722</td><td>-0.031204343</td><td>0.47180524</td><td>-0.066186495</td><td>1.0</td><td>0.0070998</td><td>-0.11356195</td><td>-0.018787232399360337</td><td>0.9576631304024323</td><td>0.4663458548076254</td><td>1.0</td><td>0.46581622875101053</td><td>-0.022219300809005443</td><td>0.0021438133855449792</td><td>-0.104576910816609</td><td>3.3362477070804664</td><td>0.8975937266162266</td><td>1.221787863315046</td><td>3.130670740376984</td><td>0</td><td>0.96</td></tr>
</tbody></table></div>
</div>
</div>
<div class="cell" data-execution_count="4">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;">def</span> add_params(events):</span>
<span id="cb4-2">    <span class="co" style="color: #5E5E5E;">"""</span></span>
<span id="cb4-3"><span class="co" style="color: #5E5E5E;">    add some parameters and units</span></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;">    """</span></span>
<span id="cb4-5">    <span class="cf" style="color: #003B4F;">for</span> pos <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">'reco_src_x'</span>, <span class="st" style="color: #20794D;">'reco_src_y'</span>, <span class="st" style="color: #20794D;">'src_x'</span>, <span class="st" style="color: #20794D;">'src_y'</span>, <span class="st" style="color: #20794D;">'reco_disp_dx'</span>, <span class="st" style="color: #20794D;">'reco_disp_dy'</span>, <span class="st" style="color: #20794D;">'x'</span>, <span class="st" style="color: #20794D;">'y'</span>]:</span>
<span id="cb4-6">        events[pos].unit <span class="op" style="color: #5E5E5E;">=</span> u.m</span>
<span id="cb4-7">    </span>
<span id="cb4-8">    <span class="cf" style="color: #003B4F;">for</span> ang <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">'reco_alt'</span>, <span class="st" style="color: #20794D;">'reco_az'</span>, <span class="st" style="color: #20794D;">'mc_alt'</span>, <span class="st" style="color: #20794D;">'mc_az'</span>, <span class="st" style="color: #20794D;">'alt_tel'</span>, <span class="st" style="color: #20794D;">'az_tel'</span>]:</span>
<span id="cb4-9">        events[ang].unit <span class="op" style="color: #5E5E5E;">=</span> u.rad</span>
<span id="cb4-10">        </span>
<span id="cb4-11">    <span class="cf" style="color: #003B4F;">for</span> ene <span class="kw" style="color: #003B4F;">in</span> [<span class="st" style="color: #20794D;">'reco_energy'</span>, <span class="st" style="color: #20794D;">'mc_energy'</span>]:</span>
<span id="cb4-12">        events[ene].unit <span class="op" style="color: #5E5E5E;">=</span> u.TeV</span>
<span id="cb4-13">    </span>
<span id="cb4-14">    events[<span class="st" style="color: #20794D;">'diff_x'</span>] <span class="op" style="color: #5E5E5E;">=</span> events[<span class="st" style="color: #20794D;">'reco_src_x'</span>] <span class="op" style="color: #5E5E5E;">-</span> events[<span class="st" style="color: #20794D;">'src_x'</span>]</span>
<span id="cb4-15">    events[<span class="st" style="color: #20794D;">'diff_y'</span>] <span class="op" style="color: #5E5E5E;">=</span> events[<span class="st" style="color: #20794D;">'reco_src_y'</span>] <span class="op" style="color: #5E5E5E;">-</span> events[<span class="st" style="color: #20794D;">'src_y'</span>]</span>
<span id="cb4-16">    events[<span class="st" style="color: #20794D;">'diff_alt'</span>] <span class="op" style="color: #5E5E5E;">=</span> events[<span class="st" style="color: #20794D;">'reco_alt'</span>] <span class="op" style="color: #5E5E5E;">-</span> events[<span class="st" style="color: #20794D;">'mc_alt'</span>]</span>
<span id="cb4-17">    events[<span class="st" style="color: #20794D;">'diff_az'</span>] <span class="op" style="color: #5E5E5E;">=</span> events[<span class="st" style="color: #20794D;">'reco_az'</span>] <span class="op" style="color: #5E5E5E;">-</span> events[<span class="st" style="color: #20794D;">'mc_az'</span>]</span>
<span id="cb4-18">    events[<span class="st" style="color: #20794D;">'diff'</span>] <span class="op" style="color: #5E5E5E;">=</span> np.sqrt(events[<span class="st" style="color: #20794D;">'diff_x'</span>]<span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span> <span class="op" style="color: #5E5E5E;">+</span> events[<span class="st" style="color: #20794D;">'diff_y'</span>]<span class="op" style="color: #5E5E5E;">**</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb4-19">    events[<span class="st" style="color: #20794D;">'offset'</span>] <span class="op" style="color: #5E5E5E;">=</span> ctaplot.ana.ana.angular_separation_altaz(events[<span class="st" style="color: #20794D;">'alt_tel'</span>].quantity, events[<span class="st" style="color: #20794D;">'az_tel'</span>].quantity,</span>
<span id="cb4-20">                                                                events[<span class="st" style="color: #20794D;">'mc_alt'</span>].quantity, events[<span class="st" style="color: #20794D;">'mc_az'</span>].quantity)</span>
<span id="cb4-21">    events[<span class="st" style="color: #20794D;">'alpha'</span>] <span class="op" style="color: #5E5E5E;">=</span> np.arctan2(events[<span class="st" style="color: #20794D;">'src_y'</span>], events[<span class="st" style="color: #20794D;">'src_x'</span>])</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="5">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">add_params(params)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="6">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;">def</span> plot_true_pos(events, ax<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>):</span>
<span id="cb6-2">    ax <span class="op" style="color: #5E5E5E;">=</span> plt.gca() <span class="cf" style="color: #003B4F;">if</span> ax <span class="kw" style="color: #003B4F;">is</span> <span class="va" style="color: #111111;">None</span> <span class="cf" style="color: #003B4F;">else</span> ax</span>
<span id="cb6-3">    ax.scatter(events[<span class="st" style="color: #20794D;">'src_x'</span>], events[<span class="st" style="color: #20794D;">'src_y'</span>], s<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">1</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb6-4">    ax.grid(<span class="va" style="color: #111111;">True</span>)</span>
<span id="cb6-5">    ax.axis(<span class="st" style="color: #20794D;">'equal'</span>)</span>
<span id="cb6-6">    ax.set_xlabel(<span class="st" style="color: #20794D;">'src_x'</span>)</span>
<span id="cb6-7">    ax.set_ylabel(<span class="st" style="color: #20794D;">'src_y'</span>)</span>
<span id="cb6-8">    ax.set_title(<span class="st" style="color: #20794D;">'events position'</span>)</span>
<span id="cb6-9">    <span class="cf" style="color: #003B4F;">return</span> ax</span>
<span id="cb6-10"></span>
<span id="cb6-11">plot_true_pos(params)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://vuillaut.github.io/labnotebook/posts/20220609_coma_aberration_bias/bias_corr_altaz_files/figure-html/cell-7-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="7">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;">def</span> plot_psf(events, ax<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>):</span>
<span id="cb7-2">    ax <span class="op" style="color: #5E5E5E;">=</span> plt.gca() <span class="cf" style="color: #003B4F;">if</span> ax <span class="kw" style="color: #003B4F;">is</span> <span class="va" style="color: #111111;">None</span> <span class="cf" style="color: #003B4F;">else</span> ax</span>
<span id="cb7-3">    rx <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">1.6</span></span>
<span id="cb7-4">    ry <span class="op" style="color: #5E5E5E;">=</span> <span class="fl" style="color: #AD0000;">0.4</span></span>
<span id="cb7-5">    <span class="co" style="color: #5E5E5E;"># ax.hist2d(events['diff_x'], events['diff_y'], bins=100, range=[[-r,r],[-r,r]]);</span></span>
<span id="cb7-6">    diff_az <span class="op" style="color: #5E5E5E;">=</span> events[<span class="st" style="color: #20794D;">'reco_az'</span>] <span class="op" style="color: #5E5E5E;">-</span> events[<span class="st" style="color: #20794D;">'mc_az'</span>]</span>
<span id="cb7-7">    diff_alt <span class="op" style="color: #5E5E5E;">=</span> events[<span class="st" style="color: #20794D;">'reco_alt'</span>] <span class="op" style="color: #5E5E5E;">-</span> events[<span class="st" style="color: #20794D;">'mc_alt'</span>]</span>
<span id="cb7-8">    <span class="cf" style="color: #003B4F;">with</span> quantity_support():</span>
<span id="cb7-9">        ax.hist2d(diff_az.to(u.deg), diff_alt.to(u.deg), </span>
<span id="cb7-10">              bins<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">120</span>, <span class="bu" style="color: null;">range</span><span class="op" style="color: #5E5E5E;">=</span>[[<span class="op" style="color: #5E5E5E;">-</span>rx,rx],[<span class="op" style="color: #5E5E5E;">-</span>ry,ry]], cmap<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'hot'</span>)</span>
<span id="cb7-11">    ax.grid(<span class="va" style="color: #111111;">True</span>)</span>
<span id="cb7-12">    <span class="co" style="color: #5E5E5E;"># ax.axis('equal')</span></span>
<span id="cb7-13">    ax.set_xlabel(<span class="st" style="color: #20794D;">'diff_az [rad]'</span>)</span>
<span id="cb7-14">    ax.set_ylabel(<span class="st" style="color: #20794D;">'diff_alt [rad]'</span>)</span>
<span id="cb7-15">    ax.set_title(<span class="st" style="color: #20794D;">'PSF'</span>)</span>
<span id="cb7-16">    <span class="cf" style="color: #003B4F;">return</span> ax</span>
<span id="cb7-17"></span>
<span id="cb7-18">plot_psf(params)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://vuillaut.github.io/labnotebook/posts/20220609_coma_aberration_bias/bias_corr_altaz_files/figure-html/cell-8-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="8">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;">def</span> plot_theta2(events, ax<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>, bias_correction<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>):</span>
<span id="cb8-2">    ax <span class="op" style="color: #5E5E5E;">=</span> plt.gca() <span class="cf" style="color: #003B4F;">if</span> ax <span class="kw" style="color: #003B4F;">is</span> <span class="va" style="color: #111111;">None</span> <span class="cf" style="color: #003B4F;">else</span> ax</span>
<span id="cb8-3">    opt <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">dict</span>(bins<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">100</span>, <span class="bu" style="color: null;">range</span><span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">0.05</span>), density<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>, histtype<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'step'</span>, bias_correction<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>, lw<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">2</span>)</span>
<span id="cb8-4">    ax<span class="op" style="color: #5E5E5E;">=</span>ctaplot.plots.plot_theta2(events[<span class="st" style="color: #20794D;">'mc_alt'</span>].quantity,  </span>
<span id="cb8-5">                                 events[<span class="st" style="color: #20794D;">'reco_alt'</span>].quantity, </span>
<span id="cb8-6">                                 events[<span class="st" style="color: #20794D;">'mc_az'</span>].quantity, </span>
<span id="cb8-7">                                 events[<span class="st" style="color: #20794D;">'reco_az'</span>].quantity,</span>
<span id="cb8-8">                                 ax<span class="op" style="color: #5E5E5E;">=</span>ax, </span>
<span id="cb8-9">                                 label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'no bias correction'</span>,</span>
<span id="cb8-10">                                 <span class="op" style="color: #5E5E5E;">**</span>opt)</span>
<span id="cb8-11">    </span>
<span id="cb8-12">    <span class="cf" style="color: #003B4F;">if</span> bias_correction:</span>
<span id="cb8-13">        opt[<span class="st" style="color: #20794D;">'bias_correction'</span>] <span class="op" style="color: #5E5E5E;">=</span> <span class="va" style="color: #111111;">True</span></span>
<span id="cb8-14">        ax<span class="op" style="color: #5E5E5E;">=</span>ctaplot.plots.plot_theta2(events[<span class="st" style="color: #20794D;">'mc_alt'</span>].quantity,</span>
<span id="cb8-15">                                     events[<span class="st" style="color: #20794D;">'reco_alt'</span>].quantity,</span>
<span id="cb8-16">                                     events[<span class="st" style="color: #20794D;">'mc_az'</span>].quantity,</span>
<span id="cb8-17">                                     events[<span class="st" style="color: #20794D;">'reco_az'</span>].quantity,</span>
<span id="cb8-18">                                     ax<span class="op" style="color: #5E5E5E;">=</span>ax, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'bias corrected'</span>, <span class="op" style="color: #5E5E5E;">**</span>opt)</span>
<span id="cb8-19">        ax.legend()</span>
<span id="cb8-20">    <span class="cf" style="color: #003B4F;">return</span> ax</span>
<span id="cb8-21"></span>
<span id="cb8-22">plot_theta2(params, bias_correction<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://vuillaut.github.io/labnotebook/posts/20220609_coma_aberration_bias/bias_corr_altaz_files/figure-html/cell-9-output-1.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="9">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="kw" style="color: #003B4F;">def</span> plot_bias_per_offset(events, ax<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>, <span class="op" style="color: #5E5E5E;">**</span>kwargs):</span>
<span id="cb9-2">    offset, bias_alt <span class="op" style="color: #5E5E5E;">=</span> ctaplot.ana.bias_per_bin(events[<span class="st" style="color: #20794D;">'mc_alt'</span>], events[<span class="st" style="color: #20794D;">'reco_alt'</span>], events[<span class="st" style="color: #20794D;">'offset'</span>], bins<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">20</span>)</span>
<span id="cb9-3">    offset, bias_az <span class="op" style="color: #5E5E5E;">=</span> ctaplot.ana.bias_per_bin(events[<span class="st" style="color: #20794D;">'mc_az'</span>], events[<span class="st" style="color: #20794D;">'reco_az'</span>], events[<span class="st" style="color: #20794D;">'offset'</span>], bins<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">20</span>)</span>
<span id="cb9-4">    ax <span class="op" style="color: #5E5E5E;">=</span> plt.gca() <span class="cf" style="color: #003B4F;">if</span> ax <span class="kw" style="color: #003B4F;">is</span> <span class="va" style="color: #111111;">None</span> <span class="cf" style="color: #003B4F;">else</span> ax</span>
<span id="cb9-5">    ax.stairs(np.rad2deg(bias_alt), edges<span class="op" style="color: #5E5E5E;">=</span>np.rad2deg(offset), label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'bias in alt'</span>, <span class="op" style="color: #5E5E5E;">**</span>kwargs)</span>
<span id="cb9-6">    ax.stairs(np.rad2deg(bias_az), edges<span class="op" style="color: #5E5E5E;">=</span>np.rad2deg(offset), label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'bias in az'</span>, <span class="op" style="color: #5E5E5E;">**</span>kwargs)</span>
<span id="cb9-7">    ax.set_xlabel(<span class="st" style="color: #20794D;">'offset in degrees'</span>)</span>
<span id="cb9-8">    ax.set_ylabel(<span class="st" style="color: #20794D;">'bias in degrees'</span>)</span>
<span id="cb9-9">    ax.legend()</span>
<span id="cb9-10">    <span class="cf" style="color: #003B4F;">return</span> ax</span>
<span id="cb9-11"></span>
<span id="cb9-12"><span class="kw" style="color: #003B4F;">def</span> plot_bias_per_alpha(events, ax<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">None</span>, <span class="op" style="color: #5E5E5E;">**</span>kwargs):</span>
<span id="cb9-13">    alpha, bias_alt <span class="op" style="color: #5E5E5E;">=</span> ctaplot.ana.bias_per_bin(events[<span class="st" style="color: #20794D;">'mc_alt'</span>], events[<span class="st" style="color: #20794D;">'reco_alt'</span>], events[<span class="st" style="color: #20794D;">'alpha'</span>], bins<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">20</span>)</span>
<span id="cb9-14">    alpha, bias_az <span class="op" style="color: #5E5E5E;">=</span> ctaplot.ana.bias_per_bin(events[<span class="st" style="color: #20794D;">'mc_az'</span>], events[<span class="st" style="color: #20794D;">'reco_az'</span>], events[<span class="st" style="color: #20794D;">'alpha'</span>], bins<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">20</span>)</span>
<span id="cb9-15">    ax <span class="op" style="color: #5E5E5E;">=</span> plt.gca() <span class="cf" style="color: #003B4F;">if</span> ax <span class="kw" style="color: #003B4F;">is</span> <span class="va" style="color: #111111;">None</span> <span class="cf" style="color: #003B4F;">else</span> ax</span>
<span id="cb9-16">    ax.stairs(np.rad2deg(bias_alt), edges<span class="op" style="color: #5E5E5E;">=</span>np.rad2deg(alpha), label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'bias in alt'</span>, <span class="op" style="color: #5E5E5E;">**</span>kwargs)</span>
<span id="cb9-17">    ax.stairs(np.rad2deg(bias_az), edges<span class="op" style="color: #5E5E5E;">=</span>np.rad2deg(alpha), label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'bias in az'</span>, <span class="op" style="color: #5E5E5E;">**</span>kwargs)</span>
<span id="cb9-18">    ax.set_xlabel(<span class="st" style="color: #20794D;">'alpha in degrees'</span>)</span>
<span id="cb9-19">    ax.set_ylabel(<span class="st" style="color: #20794D;">'bias in degrees'</span>)</span>
<span id="cb9-20">    ax.legend()</span>
<span id="cb9-21">    <span class="cf" style="color: #003B4F;">return</span> ax</span>
<span id="cb9-22"></span>
<span id="cb9-23">plot_bias_per_offset(params)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb9-24">plt.show()</span>
<span id="cb9-25">plot_bias_per_alpha(params)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://vuillaut.github.io/labnotebook/posts/20220609_coma_aberration_bias/bias_corr_altaz_files/figure-html/cell-10-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://vuillaut.github.io/labnotebook/posts/20220609_coma_aberration_bias/bias_corr_altaz_files/figure-html/cell-10-output-2.png" class="img-fluid"></p>
</div>
</div>
<div class="cell" data-execution_count="10">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;"># Select bright events to see the effect</span></span>
<span id="cb10-2"></span>
<span id="cb10-3">bright_events <span class="op" style="color: #5E5E5E;">=</span> params[(params[<span class="st" style="color: #20794D;">'intensity'</span>]<span class="op" style="color: #5E5E5E;">&gt;</span><span class="dv" style="color: #AD0000;">500</span>)]</span>
<span id="cb10-4"><span class="co" style="color: #5E5E5E;"># selected_events = bright_events[(bright_events['src_x']&gt;0) &amp; (bright_events['src_y']&gt;0)]</span></span>
<span id="cb10-5">selected_events <span class="op" style="color: #5E5E5E;">=</span> bright_events[(<span class="op" style="color: #5E5E5E;">-</span>np.pi<span class="op" style="color: #5E5E5E;">/</span><span class="dv" style="color: #AD0000;">4</span><span class="op" style="color: #5E5E5E;">&lt;</span>bright_events[<span class="st" style="color: #20794D;">'alpha'</span>])<span class="op" style="color: #5E5E5E;">&amp;</span>(bright_events[<span class="st" style="color: #20794D;">'alpha'</span>]<span class="op" style="color: #5E5E5E;">&lt;</span>np.pi<span class="op" style="color: #5E5E5E;">/</span><span class="fl" style="color: #AD0000;">4.</span>)]</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="11">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;">def</span> plot_all(events):</span>
<span id="cb11-2">    fig, axes <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">5</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">25</span>,<span class="dv" style="color: #AD0000;">5</span>))</span>
<span id="cb11-3">    plot_true_pos(events, ax<span class="op" style="color: #5E5E5E;">=</span>axes[<span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb11-4">    plot_psf(events, ax<span class="op" style="color: #5E5E5E;">=</span>axes[<span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb11-5">    plot_theta2(events, ax<span class="op" style="color: #5E5E5E;">=</span>axes[<span class="dv" style="color: #AD0000;">2</span>])</span>
<span id="cb11-6">    plot_bias_per_offset(events, ax<span class="op" style="color: #5E5E5E;">=</span>axes[<span class="dv" style="color: #AD0000;">3</span>])</span>
<span id="cb11-7">    plot_bias_per_alpha(events, ax<span class="op" style="color: #5E5E5E;">=</span>axes[<span class="dv" style="color: #AD0000;">4</span>])</span>
<span id="cb11-8">    plt.tight_layout()</span>
<span id="cb11-9">    plt.show()</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="12">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="bu" style="color: null;">print</span>(<span class="st" style="color: #20794D;">"Bright events"</span>)</span>
<span id="cb12-2">plot_all(bright_events)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Bright events</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://vuillaut.github.io/labnotebook/posts/20220609_coma_aberration_bias/bias_corr_altaz_files/figure-html/cell-13-output-2.png" class="img-fluid"></p>
</div>
</div>
<section id="bright-events-in-quarters" class="level3">
<h3 class="anchored" data-anchor-id="bright-events-in-quarters">Bright events in quarters</h3>
<div class="cell" data-execution_count="13">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">edges <span class="op" style="color: #5E5E5E;">=</span> np.histogram_bin_edges(bright_events[<span class="st" style="color: #20794D;">'alpha'</span>].value, bins<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>)</span>
<span id="cb14-2"><span class="cf" style="color: #003B4F;">for</span> ii, low <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(edges[:<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]):</span>
<span id="cb14-3">    selected_events <span class="op" style="color: #5E5E5E;">=</span> bright_events[(low<span class="op" style="color: #5E5E5E;">&lt;</span>bright_events[<span class="st" style="color: #20794D;">'alpha'</span>])<span class="op" style="color: #5E5E5E;">&amp;</span>(bright_events[<span class="st" style="color: #20794D;">'alpha'</span>]<span class="op" style="color: #5E5E5E;">&lt;</span>edges[ii<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>])]</span>
<span id="cb14-4">    plot_all(selected_events)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://vuillaut.github.io/labnotebook/posts/20220609_coma_aberration_bias/bias_corr_altaz_files/figure-html/cell-14-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://vuillaut.github.io/labnotebook/posts/20220609_coma_aberration_bias/bias_corr_altaz_files/figure-html/cell-14-output-2.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://vuillaut.github.io/labnotebook/posts/20220609_coma_aberration_bias/bias_corr_altaz_files/figure-html/cell-14-output-3.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://vuillaut.github.io/labnotebook/posts/20220609_coma_aberration_bias/bias_corr_altaz_files/figure-html/cell-14-output-4.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://vuillaut.github.io/labnotebook/posts/20220609_coma_aberration_bias/bias_corr_altaz_files/figure-html/cell-14-output-5.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="correcting-the-bias" class="level2">
<h2 class="anchored" data-anchor-id="correcting-the-bias">Correcting the bias</h2>
<p>We can reconstruct the source position in the sky with a different focal length. To visualize the bias, we can plot it as a function of alpha, the angle between the event position and the X-axis</p>
<div class="cell" data-execution_count="14">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="im" style="color: #00769E;">from</span> lstchain.reco.utils <span class="im" style="color: #00769E;">import</span> reco_source_position_sky</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="15">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="kw" style="color: #003B4F;">def</span> patch_events(events, true_focal_length<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">29.04</span><span class="op" style="color: #5E5E5E;">*</span>u.m, plot<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">True</span>):</span>
<span id="cb16-2">    </span>
<span id="cb16-3">    raltaz <span class="op" style="color: #5E5E5E;">=</span> reco_source_position_sky(events[<span class="st" style="color: #20794D;">'x'</span>], events[<span class="st" style="color: #20794D;">'y'</span>],</span>
<span id="cb16-4">                                  events[<span class="st" style="color: #20794D;">'reco_disp_dx'</span>], events[<span class="st" style="color: #20794D;">'reco_disp_dy'</span>],</span>
<span id="cb16-5">                                  true_focal_length,</span>
<span id="cb16-6">                                  events[<span class="st" style="color: #20794D;">'alt_tel'</span>], </span>
<span id="cb16-7">                                  events[<span class="st" style="color: #20794D;">'az_tel'</span>])</span>
<span id="cb16-8">    </span>
<span id="cb16-9">    events_corr <span class="op" style="color: #5E5E5E;">=</span> deepcopy(events)</span>
<span id="cb16-10">    events_corr[<span class="st" style="color: #20794D;">'reco_alt'</span>] <span class="op" style="color: #5E5E5E;">=</span> raltaz.alt.to(u.rad)</span>
<span id="cb16-11">    events_corr[<span class="st" style="color: #20794D;">'reco_az'</span>] <span class="op" style="color: #5E5E5E;">=</span> raltaz.az.to(u.rad)</span>
<span id="cb16-12">    </span>
<span id="cb16-13">    <span class="cf" style="color: #003B4F;">if</span> plot:</span>
<span id="cb16-14">        plt.figure(figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">10</span>,<span class="dv" style="color: #AD0000;">6</span>))</span>
<span id="cb16-15">        opt <span class="op" style="color: #5E5E5E;">=</span> <span class="bu" style="color: null;">dict</span>(bins<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">20</span>)</span>
<span id="cb16-16">        ctaplot.plots.plot_binned_bias(events[<span class="st" style="color: #20794D;">'mc_alt'</span>], </span>
<span id="cb16-17">                                   events[<span class="st" style="color: #20794D;">'reco_alt'</span>],</span>
<span id="cb16-18">                                   events[<span class="st" style="color: #20794D;">'alpha'</span>],</span>
<span id="cb16-19">                                   <span class="op" style="color: #5E5E5E;">**</span>opt,</span>
<span id="cb16-20">                                   label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'alt no corr'</span></span>
<span id="cb16-21">                                  )</span>
<span id="cb16-22"></span>
<span id="cb16-23">        ctaplot.plots.plot_binned_bias(events[<span class="st" style="color: #20794D;">'mc_az'</span>], </span>
<span id="cb16-24">                                       events[<span class="st" style="color: #20794D;">'reco_az'</span>],</span>
<span id="cb16-25">                                       events[<span class="st" style="color: #20794D;">'alpha'</span>],</span>
<span id="cb16-26">                                       <span class="op" style="color: #5E5E5E;">**</span>opt,</span>
<span id="cb16-27">                                       label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'az no corr'</span></span>
<span id="cb16-28">                                      )</span>
<span id="cb16-29"></span>
<span id="cb16-30">        x <span class="op" style="color: #5E5E5E;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;">-</span>np.pi, np.pi, <span class="dv" style="color: #AD0000;">100</span>)</span>
<span id="cb16-31">        plt.plot(x, np.cos(x)<span class="op" style="color: #5E5E5E;">*</span><span class="fl" style="color: #AD0000;">0.0008</span>, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'alt model'</span>)</span>
<span id="cb16-32">        plt.plot(x, np.sin(x)<span class="op" style="color: #5E5E5E;">*</span><span class="fl" style="color: #AD0000;">0.0028</span></span>
<span id="cb16-33">                 , label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'az model'</span>)</span>
<span id="cb16-34"></span>
<span id="cb16-35">        ctaplot.plots.plot_binned_bias(events_corr[<span class="st" style="color: #20794D;">'mc_alt'</span>], </span>
<span id="cb16-36">                                   events_corr[<span class="st" style="color: #20794D;">'reco_alt'</span>],</span>
<span id="cb16-37">                                   events_corr[<span class="st" style="color: #20794D;">'alpha'</span>],</span>
<span id="cb16-38">                                   <span class="op" style="color: #5E5E5E;">**</span>opt,</span>
<span id="cb16-39">                                   label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'alt bias corrected'</span>,</span>
<span id="cb16-40">                                  )</span>
<span id="cb16-41"></span>
<span id="cb16-42">        ctaplot.plots.plot_binned_bias(events_corr[<span class="st" style="color: #20794D;">'mc_az'</span>], </span>
<span id="cb16-43">                                       events_corr[<span class="st" style="color: #20794D;">'reco_az'</span>],</span>
<span id="cb16-44">                                       events_corr[<span class="st" style="color: #20794D;">'alpha'</span>],</span>
<span id="cb16-45">                                       <span class="op" style="color: #5E5E5E;">**</span>opt,</span>
<span id="cb16-46">                                       label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'az bias corrected'</span>,</span>
<span id="cb16-47">                                      )</span>
<span id="cb16-48">        plt.xlabel(<span class="st" style="color: #20794D;">'alpha [rad]'</span>)</span>
<span id="cb16-49"></span>
<span id="cb16-50">        plt.legend()</span>
<span id="cb16-51">        plt.show()</span>
<span id="cb16-52">        plot_all(events_corr)</span>
<span id="cb16-53">    </span>
<span id="cb16-54">    <span class="cf" style="color: #003B4F;">return</span> events_corr</span>
<span id="cb16-55">    </span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="16">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">params_patched <span class="op" style="color: #5E5E5E;">=</span> patch_events(bright_events)<span class="op" style="color: #5E5E5E;">;</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://vuillaut.github.io/labnotebook/posts/20220609_coma_aberration_bias/bias_corr_altaz_files/figure-html/cell-17-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://vuillaut.github.io/labnotebook/posts/20220609_coma_aberration_bias/bias_corr_altaz_files/figure-html/cell-17-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>We can see that a bias is still present.<br>
Let’s find the effective focal length that minimize the bias.</p>
<div class="cell" data-execution_count="17">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">focal_lengths <span class="op" style="color: #5E5E5E;">=</span> np.linspace(<span class="fl" style="color: #AD0000;">28.2</span>, <span class="fl" style="color: #AD0000;">29.2</span>, num<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">10</span>) <span class="op" style="color: #5E5E5E;">*</span> u.m</span>
<span id="cb18-2">bias_alt <span class="op" style="color: #5E5E5E;">=</span> []</span>
<span id="cb18-3">bias_az <span class="op" style="color: #5E5E5E;">=</span> [] </span>
<span id="cb18-4"><span class="cf" style="color: #003B4F;">for</span> fl <span class="kw" style="color: #003B4F;">in</span> focal_lengths:</span>
<span id="cb18-5">    <span class="bu" style="color: null;">print</span>(fl)</span>
<span id="cb18-6">    pe <span class="op" style="color: #5E5E5E;">=</span> patch_events(bright_events, true_focal_length<span class="op" style="color: #5E5E5E;">=</span>fl)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb18-7">    _, bias <span class="op" style="color: #5E5E5E;">=</span> ctaplot.ana.bias_per_bin(pe[<span class="st" style="color: #20794D;">'mc_alt'</span>], pe[<span class="st" style="color: #20794D;">'reco_alt'</span>], pe[<span class="st" style="color: #20794D;">'alpha'</span>])</span>
<span id="cb18-8">    bias_alt.append(np.rad2deg(np.mean(np.<span class="bu" style="color: null;">abs</span>(bias))))</span>
<span id="cb18-9">    _, bias <span class="op" style="color: #5E5E5E;">=</span> ctaplot.ana.bias_per_bin(pe[<span class="st" style="color: #20794D;">'mc_az'</span>], pe[<span class="st" style="color: #20794D;">'reco_az'</span>], pe[<span class="st" style="color: #20794D;">'alpha'</span>])</span>
<span id="cb18-10">    bias_az.append(np.rad2deg(np.mean(np.<span class="bu" style="color: null;">abs</span>(bias))))</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>28.2 m</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://vuillaut.github.io/labnotebook/posts/20220609_coma_aberration_bias/bias_corr_altaz_files/figure-html/cell-18-output-2.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://vuillaut.github.io/labnotebook/posts/20220609_coma_aberration_bias/bias_corr_altaz_files/figure-html/cell-18-output-3.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>28.31111111111111 m</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://vuillaut.github.io/labnotebook/posts/20220609_coma_aberration_bias/bias_corr_altaz_files/figure-html/cell-18-output-5.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://vuillaut.github.io/labnotebook/posts/20220609_coma_aberration_bias/bias_corr_altaz_files/figure-html/cell-18-output-6.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>28.42222222222222 m</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://vuillaut.github.io/labnotebook/posts/20220609_coma_aberration_bias/bias_corr_altaz_files/figure-html/cell-18-output-8.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://vuillaut.github.io/labnotebook/posts/20220609_coma_aberration_bias/bias_corr_altaz_files/figure-html/cell-18-output-9.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>28.53333333333333 m</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://vuillaut.github.io/labnotebook/posts/20220609_coma_aberration_bias/bias_corr_altaz_files/figure-html/cell-18-output-11.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://vuillaut.github.io/labnotebook/posts/20220609_coma_aberration_bias/bias_corr_altaz_files/figure-html/cell-18-output-12.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>28.644444444444442 m</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://vuillaut.github.io/labnotebook/posts/20220609_coma_aberration_bias/bias_corr_altaz_files/figure-html/cell-18-output-14.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://vuillaut.github.io/labnotebook/posts/20220609_coma_aberration_bias/bias_corr_altaz_files/figure-html/cell-18-output-15.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>28.755555555555556 m</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://vuillaut.github.io/labnotebook/posts/20220609_coma_aberration_bias/bias_corr_altaz_files/figure-html/cell-18-output-17.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://vuillaut.github.io/labnotebook/posts/20220609_coma_aberration_bias/bias_corr_altaz_files/figure-html/cell-18-output-18.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>28.866666666666667 m</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://vuillaut.github.io/labnotebook/posts/20220609_coma_aberration_bias/bias_corr_altaz_files/figure-html/cell-18-output-20.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://vuillaut.github.io/labnotebook/posts/20220609_coma_aberration_bias/bias_corr_altaz_files/figure-html/cell-18-output-21.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>28.977777777777778 m</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://vuillaut.github.io/labnotebook/posts/20220609_coma_aberration_bias/bias_corr_altaz_files/figure-html/cell-18-output-23.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://vuillaut.github.io/labnotebook/posts/20220609_coma_aberration_bias/bias_corr_altaz_files/figure-html/cell-18-output-24.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>29.08888888888889 m</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://vuillaut.github.io/labnotebook/posts/20220609_coma_aberration_bias/bias_corr_altaz_files/figure-html/cell-18-output-26.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://vuillaut.github.io/labnotebook/posts/20220609_coma_aberration_bias/bias_corr_altaz_files/figure-html/cell-18-output-27.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>29.2 m</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://vuillaut.github.io/labnotebook/posts/20220609_coma_aberration_bias/bias_corr_altaz_files/figure-html/cell-18-output-29.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://vuillaut.github.io/labnotebook/posts/20220609_coma_aberration_bias/bias_corr_altaz_files/figure-html/cell-18-output-30.png" class="img-fluid"></p>
</div>
</div>
<p>We can find the effective focal length that minimize the bias:</p>
<div class="cell" data-execution_count="18">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">plt.plot(focal_lengths, bias_alt, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'alt'</span>)</span>
<span id="cb29-2">plt.plot(focal_lengths, bias_az, label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'az'</span>)</span>
<span id="cb29-3">plt.title(<span class="st" style="color: #20794D;">'Minimizing the bias'</span>)</span>
<span id="cb29-4">plt.xlabel(<span class="st" style="color: #20794D;">'effective focal length [m]'</span>)</span>
<span id="cb29-5">plt.ylabel(<span class="st" style="color: #20794D;">'bias [degrees]'</span>)</span>
<span id="cb29-6">plt.legend()</span>
<span id="cb29-7"></span>
<span id="cb29-8"><span class="cf" style="color: #003B4F;">assert</span> np.argmin(bias_alt) <span class="op" style="color: #5E5E5E;">==</span> np.argmin(bias_az)</span>
<span id="cb29-9"><span class="bu" style="color: null;">print</span>(<span class="ss" style="color: #20794D;">f"The focal length that minimize the bias: </span><span class="sc" style="color: #5E5E5E;">{</span>focal_lengths[np.argmin(bias_alt)]<span class="sc" style="color: #5E5E5E;">:.3f}</span><span class="ss" style="color: #20794D;">"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>The focal length that minimize the bias: 28.756 m</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://vuillaut.github.io/labnotebook/posts/20220609_coma_aberration_bias/bias_corr_altaz_files/figure-html/cell-19-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Let’s see the results with that focal length:</p>
<div class="cell" data-execution_count="19">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">params_patched <span class="op" style="color: #5E5E5E;">=</span> patch_events(bright_events, focal_lengths[np.argmin(bias_alt)], plot<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)<span class="op" style="color: #5E5E5E;">;</span></span>
<span id="cb31-2">add_params(params_patched)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="20">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">edges <span class="op" style="color: #5E5E5E;">=</span> np.histogram_bin_edges(params_patched[<span class="st" style="color: #20794D;">'alpha'</span>].value, bins<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">5</span>)</span>
<span id="cb32-2"><span class="cf" style="color: #003B4F;">for</span> ii, low <span class="kw" style="color: #003B4F;">in</span> <span class="bu" style="color: null;">enumerate</span>(edges[:<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>]):</span>
<span id="cb32-3">    selected_events <span class="op" style="color: #5E5E5E;">=</span> params_patched[(low<span class="op" style="color: #5E5E5E;">&lt;</span>bright_events[<span class="st" style="color: #20794D;">'alpha'</span>])<span class="op" style="color: #5E5E5E;">&amp;</span>(params_patched[<span class="st" style="color: #20794D;">'alpha'</span>]<span class="op" style="color: #5E5E5E;">&lt;</span>edges[ii<span class="op" style="color: #5E5E5E;">+</span><span class="dv" style="color: #AD0000;">1</span>])]</span>
<span id="cb32-4">    plot_all(selected_events)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://vuillaut.github.io/labnotebook/posts/20220609_coma_aberration_bias/bias_corr_altaz_files/figure-html/cell-21-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://vuillaut.github.io/labnotebook/posts/20220609_coma_aberration_bias/bias_corr_altaz_files/figure-html/cell-21-output-2.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://vuillaut.github.io/labnotebook/posts/20220609_coma_aberration_bias/bias_corr_altaz_files/figure-html/cell-21-output-3.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://vuillaut.github.io/labnotebook/posts/20220609_coma_aberration_bias/bias_corr_altaz_files/figure-html/cell-21-output-4.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://vuillaut.github.io/labnotebook/posts/20220609_coma_aberration_bias/bias_corr_altaz_files/figure-html/cell-21-output-5.png" class="img-fluid"></p>
</div>
</div>
<p>The alpha-dependence is now gone</p>
</section>
<section id="angular-resolution-before-and-after" class="level2">
<h2 class="anchored" data-anchor-id="angular-resolution-before-and-after">Angular resolution before and after</h2>
<div class="cell" data-execution_count="21">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">selected_events <span class="op" style="color: #5E5E5E;">=</span> params[(params[<span class="st" style="color: #20794D;">'intensity'</span>]<span class="op" style="color: #5E5E5E;">&gt;</span><span class="dv" style="color: #AD0000;">100</span>) <span class="op" style="color: #5E5E5E;">&amp;</span> (params[<span class="st" style="color: #20794D;">'gammaness'</span>]<span class="op" style="color: #5E5E5E;">&gt;</span><span class="fl" style="color: #AD0000;">0.4</span>)]</span>
<span id="cb33-2">selected_corr <span class="op" style="color: #5E5E5E;">=</span> patch_events(selected_events, plot<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="22">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">ctaplot.plot_angular_resolution_per_energy(selected_events[<span class="st" style="color: #20794D;">'mc_alt'</span>].quantity,</span>
<span id="cb34-2">                                           selected_events[<span class="st" style="color: #20794D;">'reco_alt'</span>].quantity,</span>
<span id="cb34-3">                                           selected_events[<span class="st" style="color: #20794D;">'mc_az'</span>].quantity,</span>
<span id="cb34-4">                                           selected_events[<span class="st" style="color: #20794D;">'reco_az'</span>].quantity,</span>
<span id="cb34-5">                                           selected_events[<span class="st" style="color: #20794D;">'reco_energy'</span>].quantity,)</span>
<span id="cb34-6"></span>
<span id="cb34-7">ctaplot.plot_angular_resolution_per_energy(selected_corr[<span class="st" style="color: #20794D;">'mc_alt'</span>].quantity,</span>
<span id="cb34-8">                                           selected_corr[<span class="st" style="color: #20794D;">'reco_alt'</span>].quantity,</span>
<span id="cb34-9">                                           selected_corr[<span class="st" style="color: #20794D;">'mc_az'</span>].quantity,</span>
<span id="cb34-10">                                           selected_corr[<span class="st" style="color: #20794D;">'reco_az'</span>].quantity,</span>
<span id="cb34-11">                                           selected_corr[<span class="st" style="color: #20794D;">'reco_energy'</span>].quantity,)</span>
<span id="cb34-12"></span>
<span id="cb34-13"></span>
<span id="cb34-14">ctaplot.plot_angular_resolution_cta_requirement(<span class="st" style="color: #20794D;">'north'</span>, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'black'</span>)</span>
<span id="cb34-15">plt.ylim(<span class="dv" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">0.4</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>(0.0, 0.4)</code></pre>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://vuillaut.github.io/labnotebook/posts/20220609_coma_aberration_bias/bias_corr_altaz_files/figure-html/cell-24-output-2.png" class="img-fluid"></p>
</div>
</div>
</section>
<section id="testing-the-same-correction-on-point-source-gammas" class="level2">
<h2 class="anchored" data-anchor-id="testing-the-same-correction-on-point-source-gammas">Testing the same correction on point source gammas</h2>
<div class="cell" data-execution_count="23">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">filename <span class="op" style="color: #5E5E5E;">=</span> <span class="st" style="color: #20794D;">'dl2_gamma_20deg_180deg_off0.4deg_20220215_v0.9.1_prod5_trans_80_local_tailcut_8_4_testing.h5'</span></span>
<span id="cb36-2"></span>
<span id="cb36-3"><span class="kw" style="color: #003B4F;">def</span> analyis(filename):</span>
<span id="cb36-4">    params <span class="op" style="color: #5E5E5E;">=</span> read_table(filename, path<span class="op" style="color: #5E5E5E;">=</span>dl2_params_lstcam_key)</span>
<span id="cb36-5">    add_params(params)</span>
<span id="cb36-6">    <span class="co" style="color: #5E5E5E;"># bright_events = params[(params['intensity']&gt;5000)]</span></span>
<span id="cb36-7">    bright_events <span class="op" style="color: #5E5E5E;">=</span> params[(params[<span class="st" style="color: #20794D;">'intensity'</span>]<span class="op" style="color: #5E5E5E;">&gt;</span><span class="dv" style="color: #AD0000;">50</span>) <span class="op" style="color: #5E5E5E;">&amp;</span> ((params[<span class="st" style="color: #20794D;">'gammaness'</span>]<span class="op" style="color: #5E5E5E;">&gt;</span><span class="fl" style="color: #AD0000;">0.7</span>))]</span>
<span id="cb36-8">    bright_events_corr <span class="op" style="color: #5E5E5E;">=</span> patch_events(bright_events, true_focal_length<span class="op" style="color: #5E5E5E;">=</span><span class="fl" style="color: #AD0000;">29.04</span><span class="op" style="color: #5E5E5E;">*</span>u.m, plot<span class="op" style="color: #5E5E5E;">=</span><span class="va" style="color: #111111;">False</span>)</span>
<span id="cb36-9"></span>
<span id="cb36-10"></span>
<span id="cb36-11">    fig, axes <span class="op" style="color: #5E5E5E;">=</span> plt.subplots(<span class="dv" style="color: #AD0000;">1</span>, <span class="dv" style="color: #AD0000;">3</span>, figsize<span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">20</span>,<span class="dv" style="color: #AD0000;">5</span>))</span>
<span id="cb36-12">    </span>
<span id="cb36-13">    plot_psf(bright_events_corr, ax<span class="op" style="color: #5E5E5E;">=</span>axes[<span class="dv" style="color: #AD0000;">0</span>])</span>
<span id="cb36-14"></span>
<span id="cb36-15">    opt<span class="op" style="color: #5E5E5E;">=</span><span class="bu" style="color: null;">dict</span>(bins<span class="op" style="color: #5E5E5E;">=</span><span class="dv" style="color: #AD0000;">50</span>,  histtype<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'step'</span>, <span class="bu" style="color: null;">range</span><span class="op" style="color: #5E5E5E;">=</span>(<span class="dv" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">0.1</span>))</span>
<span id="cb36-16">    ctaplot.plot_theta2(bright_events[<span class="st" style="color: #20794D;">'mc_alt'</span>].quantity,</span>
<span id="cb36-17">                       bright_events[<span class="st" style="color: #20794D;">'reco_alt'</span>].quantity,</span>
<span id="cb36-18">                       bright_events[<span class="st" style="color: #20794D;">'mc_az'</span>].quantity,</span>
<span id="cb36-19">                       bright_events[<span class="st" style="color: #20794D;">'reco_az'</span>].quantity,</span>
<span id="cb36-20">                        ax<span class="op" style="color: #5E5E5E;">=</span>axes[<span class="dv" style="color: #AD0000;">1</span>],</span>
<span id="cb36-21">                        label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'no bias correction'</span>,</span>
<span id="cb36-22">                        <span class="op" style="color: #5E5E5E;">**</span>opt</span>
<span id="cb36-23">                       )</span>
<span id="cb36-24">    </span>
<span id="cb36-25">    ctaplot.plot_theta2(bright_events_corr[<span class="st" style="color: #20794D;">'mc_alt'</span>].quantity,</span>
<span id="cb36-26">                   bright_events_corr[<span class="st" style="color: #20794D;">'reco_alt'</span>].quantity,</span>
<span id="cb36-27">                   bright_events_corr[<span class="st" style="color: #20794D;">'mc_az'</span>].quantity,</span>
<span id="cb36-28">                   bright_events_corr[<span class="st" style="color: #20794D;">'reco_az'</span>].quantity,</span>
<span id="cb36-29">                        ax<span class="op" style="color: #5E5E5E;">=</span>axes[<span class="dv" style="color: #AD0000;">1</span>],</span>
<span id="cb36-30">                    label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'bias corrected'</span>,</span>
<span id="cb36-31">                        <span class="op" style="color: #5E5E5E;">**</span>opt</span>
<span id="cb36-32">                   )</span>
<span id="cb36-33">    axes[<span class="dv" style="color: #AD0000;">1</span>].legend()</span>
<span id="cb36-34">    </span>
<span id="cb36-35">    ctaplot.plot_angular_resolution_per_energy(bright_events[<span class="st" style="color: #20794D;">'mc_alt'</span>].quantity,</span>
<span id="cb36-36">                                           bright_events[<span class="st" style="color: #20794D;">'reco_alt'</span>].quantity,</span>
<span id="cb36-37">                                           bright_events[<span class="st" style="color: #20794D;">'mc_az'</span>].quantity,</span>
<span id="cb36-38">                                           bright_events[<span class="st" style="color: #20794D;">'reco_az'</span>].quantity,</span>
<span id="cb36-39">                                           bright_events[<span class="st" style="color: #20794D;">'reco_energy'</span>].quantity,</span>
<span id="cb36-40">                                                  ax<span class="op" style="color: #5E5E5E;">=</span>axes[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>],</span>
<span id="cb36-41">                                             label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'no bias correction'</span>,  </span>
<span id="cb36-42">                                              )</span>
<span id="cb36-43"></span>
<span id="cb36-44"></span>
<span id="cb36-45">    ctaplot.plot_angular_resolution_per_energy(bright_events_corr[<span class="st" style="color: #20794D;">'mc_alt'</span>].quantity,</span>
<span id="cb36-46">                                               bright_events_corr[<span class="st" style="color: #20794D;">'reco_alt'</span>].quantity,</span>
<span id="cb36-47">                                               bright_events_corr[<span class="st" style="color: #20794D;">'mc_az'</span>].quantity,</span>
<span id="cb36-48">                                               bright_events_corr[<span class="st" style="color: #20794D;">'reco_az'</span>].quantity,</span>
<span id="cb36-49">                                               bright_events_corr[<span class="st" style="color: #20794D;">'reco_energy'</span>].quantity,</span>
<span id="cb36-50">                                               ax<span class="op" style="color: #5E5E5E;">=</span>axes[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>],</span>
<span id="cb36-51">                                               label<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'bias corrected'</span>,</span>
<span id="cb36-52">                                               <span class="co" style="color: #5E5E5E;"># ls='--'</span></span>
<span id="cb36-53">                                              )</span>
<span id="cb36-54"></span>
<span id="cb36-55">    ctaplot.plot_angular_resolution_cta_requirement(<span class="st" style="color: #20794D;">'north'</span>, color<span class="op" style="color: #5E5E5E;">=</span><span class="st" style="color: #20794D;">'black'</span>, ax<span class="op" style="color: #5E5E5E;">=</span>axes[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>])</span>
<span id="cb36-56">    axes[<span class="op" style="color: #5E5E5E;">-</span><span class="dv" style="color: #AD0000;">1</span>].set_ylim(<span class="dv" style="color: #AD0000;">0</span>, <span class="fl" style="color: #AD0000;">0.4</span>)</span></code></pre></div>
</details>
</div>
<div class="cell" data-execution_count="24">
<details>
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">analyis(filename)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<p><img src="https://vuillaut.github.io/labnotebook/posts/20220609_coma_aberration_bias/bias_corr_altaz_files/figure-html/cell-27-output-1.png" class="img-fluid"></p>
</div>
</div>


</section>

 ]]></description>
  <category>notes</category>
  <category>cta</category>
  <guid>https://vuillaut.github.io/labnotebook/posts/20220609_coma_aberration_bias/bias_corr_altaz.html</guid>
  <pubDate>Thu, 09 Jun 2022 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
